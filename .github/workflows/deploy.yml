name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/droply
          echo "📋 Current commit before pull:"
          git log --oneline -1 2>/dev/null || echo "No commits found"
          echo "🔄 Cleaning up and pulling latest changes..."
          # Reset to clean state and pull latest
          git reset --hard HEAD
          git clean -fd
          git fetch origin
          git reset --hard origin/main
          echo "📋 Current commit after pull:"
          git log --oneline -1
          # Remove any existing .env file to ensure we use GitHub Secrets
          rm -f .env
          # Set environment variables from GitHub Secrets
          export SECRET_KEY='${{ secrets.SECRET_KEY }}'
          export STRIPE_SECRET_KEY='${{ secrets.STRIPE_SECRET_KEY }}'
          export STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}'
          export GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'
          export GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'
          export DAILY_API_KEY='${{ secrets.DAILY_API_KEY }}'
          export YOUR_DOMAIN='https://droply.live'
          export FLASK_ENV='production'
          export ENVIRONMENT='production'
          export FLASK_DEBUG='0'
          # Zero-downtime deployment
          echo "🚀 Starting zero-downtime deployment..."
          # Clean up any existing containers on port 5001
          echo "🧹 Cleaning up existing containers on port 5001..."
          docker ps -q --filter "publish=5001" | xargs -r docker stop || true
          docker ps -aq --filter "publish=5001" | xargs -r docker rm || true
          docker ps -aq --filter "name=droply-web-new" | xargs -r docker stop || true
          docker ps -aq --filter "name=droply-web-new" | xargs -r docker rm || true
          # Build new image with timestamp tag
          NEW_IMAGE_TAG="droply-web:$(date +%s)"
          docker build --build-arg BUILD_DATE="$(date)" -t $NEW_IMAGE_TAG .
          
          # Start new container on different port
          NEW_CONTAINER_NAME="droply-web-new-$(date +%s)"
          docker run -d --name $NEW_CONTAINER_NAME \
            -p 5001:5000 \
            --env-file <(env | grep -E '^(SECRET_KEY|STRIPE_SECRET_KEY|STRIPE_WEBHOOK_SECRET|GOOGLE_CLIENT_ID|GOOGLE_CLIENT_SECRET|DAILY_API_KEY|YOUR_DOMAIN|FLASK_ENV|ENVIRONMENT|FLASK_DEBUG)=') \
            $NEW_IMAGE_TAG
          
          # Wait for new container to be healthy
          echo "⏳ Waiting for new container to be ready..."
          sleep 15
          
          # Test new container
          if curl -f http://localhost:5001 > /dev/null 2>&1; then
            echo "✅ New container is healthy, switching traffic..."
            # Stop old containers
            docker compose down
            # Start new container on port 5000
            docker stop $NEW_CONTAINER_NAME
            docker rm $NEW_CONTAINER_NAME
            docker run -d --name droply-web-1 \
              -p 5000:5000 \
              --env-file <(env | grep -E '^(SECRET_KEY|STRIPE_SECRET_KEY|STRIPE_WEBHOOK_SECRET|GOOGLE_CLIENT_ID|GOOGLE_CLIENT_SECRET|DAILY_API_KEY|YOUR_DOMAIN|FLASK_ENV|ENVIRONMENT|FLASK_DEBUG)=') \
              $NEW_IMAGE_TAG
            echo "🎉 Zero-downtime deployment completed!"
          else
            echo "❌ New container failed health check, rolling back..."
            docker stop $NEW_CONTAINER_NAME
            docker rm $NEW_CONTAINER_NAME
            exit 1
          fi
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/droply
          docker compose ps
          echo "✅ Deployment completed successfully!"
          echo "🌍 Your site is live at: https://droply.live"
